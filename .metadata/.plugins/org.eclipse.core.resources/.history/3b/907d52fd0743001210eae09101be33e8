package sequentialgame.grid;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import props.DiscreteDistribution;
import props.Joint;
import utils.FileUtils;

/**
 * An implementation of a simple rectangular board.
 * Valid actions are (Up, Down, Left, Right, Stick).
 * Players can have multiple goals that all give the 
 * same reward. One-way semi-walls can also exist, 
 * which define the probability that a player in some
 * position succeeds in moving in its intended direction
 * (different probabilities can exist for each position
 * and movement direction). Failing to pass through a
 * semi-wall results in sticking in the same position.
 * 
 * @author sodomka
 *
 */
public class SimpleBoard implements Board {

	/**
	 * The board dimensions.
	 */
	private int numXLocations = 0;
	private int numYLocations = 0;
		
	/**
	 * Arrays specifying the probability of successfully moving
	 * in the specified direction, assuming the final location
	 * is an occupiable square. This allows for walls, semiwalls,
	 * one-directional walls, and one-directional semiwalls.
	 * By default, there are no walls.
	 */
	private double[][] upMovementSuccessProbability;
	private double[][] downMovementSuccessProbability;
	private double[][] leftMovementSuccessProbability;
	private double[][] rightMovementSuccessProbability;

	/**
	 * Array specifying whether each position on the grid
	 * is allowed to be occupied.
	 */
	private boolean[][] isOccupiablePosition;
	private List<Position> occupiablePositions;
	
	/**
	 * A list of actions that have any meaning on this board.
	 */
	private List<GridAction> allowableActions;
	
	/**
	 * For each player, a list of positions for which
	 * a goal is located.
	 */
	private Joint<List<Position>> goalPositionsPerPlayer;

	/**
	 * The immediate reward a player receives for reaching a goal position. 
	 */
	private double goalReward = 100;
	
	/**
	 * The immediate reward a player receives for taking a non-stick action.
	 * This is typically negative.
	 */
	private double stepReward = -1;
	
	public SimpleBoard(String filepath) {
		List<String> lines = FileUtils.readLines(filepath);
		//first, get board dimensions
		for(String s: lines) {
			if(s.replaceAll("\\n","").equals("END")) {
				break;
			} else {
				this.numYLocations++;
				this.numXLocations = s.length();
			}
		}
		//set defaults
		this.isOccupiablePosition = new boolean[numXLocations][numYLocations];
		this.upMovementSuccessProbability = new double[numXLocations][numYLocations];
		this.downMovementSuccessProbability = new double[numXLocations][numYLocations];
		this.leftMovementSuccessProbability = new double[numXLocations][numYLocations];
		this.rightMovementSuccessProbability = new double[numXLocations][numYLocations];
		for (int x=0; x<numXLocations; x++) {
			for (int y=0; y<numYLocations; y++) {
				isOccupiablePosition[x][y] = true;
				upMovementSuccessProbability[x][y] = 1;
				downMovementSuccessProbability[x][y] = 1;
				leftMovementSuccessProbability[x][y] = 1;
				rightMovementSuccessProbability[x][y] = 1;
			}
		}
		//load actual info
		boolean atInfo = false;
		for(int y=0;y<lines.size();y++) {
			if(!atInfo) {
				if(lines.get(y).replaceAll("\\n", "").equals("END")) {
					atInfo = true;
					continue;
				}
				for(int x=0;x<lines.get(y).length();x++) {
					char c = lines.get(y).charAt(x);
					
				}
			} else {
				
			}
		}
		
		this.occupiablePositions = this.computeOccupiablePositions();
		this.allowableActions = this.computeAllowableActions();
		
	}
	
	public SimpleBoard(int numXLocations, int numYLocations) {
		this.numXLocations = numXLocations;
		this.numYLocations = numYLocations;
		isOccupiablePosition = new boolean[numXLocations][numYLocations];
		upMovementSuccessProbability = new double[numXLocations][numYLocations];
		downMovementSuccessProbability = new double[numXLocations][numYLocations];
		leftMovementSuccessProbability = new double[numXLocations][numYLocations];
		rightMovementSuccessProbability = new double[numXLocations][numYLocations];
		for (int x=0; x<numXLocations; x++) {
			for (int y=0; y<numYLocations; y++) {
				isOccupiablePosition[x][y] = true;
				upMovementSuccessProbability[x][y] = 1;
				downMovementSuccessProbability[x][y] = 1;
				leftMovementSuccessProbability[x][y] = 1;
				rightMovementSuccessProbability[x][y] = 1;
			}
		}
		occupiablePositions = computeOccupiablePositions();
		allowableActions = computeAllowableActions();
		goalPositionsPerPlayer = new Joint<List<Position>>();

		//TODO: Make this more general!!!
		// By default, create a single goal position in (0,0) and none anywhere else.
		List<Position> p1Positions = new ArrayList<Position>();
		List<Position> p2Positions = new ArrayList<Position>();
		p1Positions.add(new Position(0,0));
		p2Positions.add(new Position(1,0));
		goalPositionsPerPlayer.add(p1Positions);
		goalPositionsPerPlayer.add(p2Positions);		
	}
	
	
	private List<Position> computeOccupiablePositions() {
		List<Position> occupiablePositions = new ArrayList<Position>();
		for (int x=0; x<numXLocations; x++) {
			for (int y=0; y<numYLocations; y++) {
				if (isOccupiablePosition[x][y]) {
					occupiablePositions.add(new Position(x,y));
				}
			}
		}
		return occupiablePositions;
	}
	
	@Override
	public List<Position> getOccupiablePositions() {
		return occupiablePositions;
	}


	private List<GridAction> computeAllowableActions() {
		List<GridAction> allowableActions = new ArrayList<GridAction>();
		allowableActions.add(new GridAction("up"));
		allowableActions.add(new GridAction("down"));
		allowableActions.add(new GridAction("left"));
		allowableActions.add(new GridAction("right"));
		allowableActions.add(new GridAction("stick"));
		return allowableActions;
	}
	
	@Override
	public List<GridAction> getAllowableActions() {
		return allowableActions;
	}
	
	

	@Override
	public double getActionReward(GridAction playerAction) {
		// Reward is 0 unless the player's action was to take a step.
		// (regardless of whether that step was successful).
		double actionReward = 0;
		if (isUpAction(playerAction) ||
				isDownAction(playerAction) ||
				isLeftAction(playerAction) ||
				isRightAction(playerAction)) {
			actionReward = stepReward;
		}
		return actionReward;
	}


	@Override
	public double getGoalReward(Position playerPosition, Integer playerIdx) {
		if(goalPositionsPerPlayer.getForPlayer(playerIdx).contains(playerPosition)) {
			return goalReward;
		}
		return 0;
	}
	
	
	
	public DiscreteDistribution<Position> getNextPositionDistribution(
			Position currentPlayerPosition,
			GridAction playerAction) {

		// Get next player position, assuming movement is successful.
		Position nextPlayerPositionGivenActionSuccess = getNextPlayerPositionGivenActionSuccess(currentPlayerPosition, playerAction);
		Position nextPlayerPositionGivenActionFail = currentPlayerPosition;

		double probabilityOfActionSuccess = getProbabilityOfActionSuccess(currentPlayerPosition, playerAction);
		
		DiscreteDistribution<Position> nextPositionDistribution = new DiscreteDistribution<Position>();
		nextPositionDistribution.add(nextPlayerPositionGivenActionSuccess, probabilityOfActionSuccess);
		
		// Add a failure position if movement failure is possible.
		if (probabilityOfActionSuccess<1) {
			nextPositionDistribution.add(nextPlayerPositionGivenActionFail, 1-probabilityOfActionSuccess);
		}
		return nextPositionDistribution;
	}

	
	private double getProbabilityOfActionSuccess(
			Position currentPlayerPosition, GridAction playerAction) {
		int x = currentPlayerPosition.getX();
		int y = currentPlayerPosition.getY();
		if (isUpAction(playerAction)) {
			return upMovementSuccessProbability[x][y];
		} else if (isDownAction(playerAction)) {
			return downMovementSuccessProbability[x][y];
		} else if (isLeftAction(playerAction)) {
			return leftMovementSuccessProbability[x][y];
		} else if (isRightAction(playerAction)) {
			return rightMovementSuccessProbability[x][y];
		} else if (isStickAction(playerAction)) {
			return 1;
		} else {
			System.err.println("Illegal action: " + playerAction);
			return 0;
		}
	}

	private Position getNextPlayerPositionGivenActionSuccess(
			Position currentPlayerPosition, GridAction playerAction) {
		int x = currentPlayerPosition.getX();
		int y = currentPlayerPosition.getY();
		int nextX;
		int nextY;
		if (isUpAction(playerAction)) {
			nextX = x;
			nextY = y+1;
		} else if (isDownAction(playerAction)) {
			nextX = x;
			nextY = y-1;
		} else if (isLeftAction(playerAction)) {
			nextX = x-1;
			nextY = y;
		} else if (isRightAction(playerAction)) {
			nextX = x+1;
			nextY = y;
		} else if (isStickAction(playerAction)) {
			nextX = x;
			nextY = y;
		} else {
			System.err.println("Illegal action: " + playerAction);
			nextX = x;
			nextY = y;
		}
		nextX = Math.max(0, nextX);
		nextX = Math.min(numXLocations-1, nextX);
		nextY = Math.max(0, nextY);
		nextY = Math.min(numXLocations-1, nextY);

		// Any actions towards non-occupiable positions result 
		// in no movement.
		if (!isOccupiablePosition[nextX][nextY]) {
			nextX = x;
			nextY = y;
		}
		return getPosition(nextX, nextY);
	}
	
	
	private Position getPosition(int x, int y) {
		// TODO: Could keep a list of positions to ensure
		// duplicate positions aren't stored in memory.
		return new Position(x, y);
	}

	private boolean isUpAction(GridAction playerAction) {
		return playerAction.getName().equalsIgnoreCase("up");
	}

	private boolean isDownAction(GridAction playerAction) {
		return playerAction.getName().equalsIgnoreCase("down");		
	}

	private boolean isLeftAction(GridAction playerAction) {
		return playerAction.getName().equalsIgnoreCase("left");		
	}

	private boolean isRightAction(GridAction playerAction) {
		return playerAction.getName().equalsIgnoreCase("right");		
	}

	private boolean isStickAction(GridAction playerAction) {
		return playerAction.getName().equalsIgnoreCase("stick");		
	}


	@Override
	public boolean hasGoalForPlayer(Position playerPosition, Integer playerIdx) {
		return (goalPositionsPerPlayer.get(playerIdx).contains(playerPosition));
	}




}
